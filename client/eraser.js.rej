diff a/client/eraser.js b/client/eraser.js	(rejected hunks)
@@ -2,12 +2,12 @@ import {
   operationId,
   eraserTransaction,
 } from "./transaction.js";
-import { mirrorAcross } from "./util2d.js";
+// import { mirrorAcross } from "./util2d.js";
 
 export default class Eraser {
-  constructor(virtualCanvas, transactionLog, toolbar) {
-    this.virtualCanvas = virtualCanvas;
+  constructor(transactionLog, virtualCanvas, toolbar) {
     this.transactionLog = transactionLog;
+    this.virtualCanvas = virtualCanvas;
     this.toolbar = toolbar;
 
     this.colorpicker = toolbar.colorpicker;
@@ -31,13 +31,13 @@ export default class Eraser {
 
   mouseDownLeft(input) {
     this.mode = 0;
-    this.currentColor = this.colorpicker.secondarycolor;
+    this.currentColor = this.toolbar.colorpicker.secondarycolor;
     this.handleMouseDown(input);
   }
 
   mouseDownRight(input) {
     this.mode = 1;
-    this.currentColor = this.colorpicker.secondarycolor;
+    this.currentColor = this.toolbar.colorpicker.secondarycolor;
     this.handleMouseDown(input);
   }
 
@@ -53,32 +53,61 @@ export default class Eraser {
       return;
 
     this.points.push(newPoint);
+    if (this.points.length < 3) return;
+    if (this.points.length > 3) this.points.shift();
+    const transaction = eraserTransaction(
+      this.operationId,
+      this.mode,
+      this.currentColor,
+      this.toolbar.colorpicker.primarycolor,
+      this.toolbar.brushsize.size,
+      ...this.points,
+      // this.points[0],
+      // this.points[0],
+      // this.points[0],
+      // this.points[0],
+    );
+    this.transactionLog.pushClient(transaction);
+  }
+  
+  // mouseMove(input) {
+  //   if (!this.isDrawing) return;
 
-    if (this.points.length === 2) {
-      const mirroredPoint = mirrorAcross(this.points[0], this.points[1]);
-      this.points.unshift(mirroredPoint);
-    }
+  //   const newPoint = this.virtualCanvas.positionInCanvas(input.x, input.y);
+  //   if (
+  //     this.points.length > 0 &&
+  //     newPoint[0] === this.points[this.points.length - 1][0] &&
+  //     newPoint[1] === this.points[this.points.length - 1][1]
+  //   )
+  //     return;
 
-    if (this.points.length > 3) {
-      this.points.shift();
-    }
+  //   this.points.push(newPoint);
 
-    if (this.points.length === 3) {
-      this.transactionLog.pushClient(
-        eraserTransaction(
-          this.operationId,
-          this.currentColor,
-          this.colorpicker.primarycolor,
-          this.brushsize.size,
-          this.points[0],
-          this.points[1],
-          this.points[2],
-          this.points[2],
-          this.mode
-        )
-      );
-    }
-  }
+  //   if (this.points.length === 2) {
+  //     const mirroredPoint = mirrorAcross(this.points[0], this.points[1]);
+  //     this.points.unshift(mirroredPoint);
+  //   }
+
+  //   if (this.points.length > 3) {
+  //     this.points.shift();
+  //   }
+
+  //   if (this.points.length === 3) {
+  //     this.transactionLog.pushClient(
+  //       eraserTransaction(
+  //         this.operationId,
+  //         this.currentColor,
+  //         this.colorpicker.primarycolor,
+  //         this.brushsize.size,
+  //         this.points[0],
+  //         this.points[1],
+  //         this.points[2],
+  //         this.points[2],
+  //         this.mode
+  //       )
+  //     );
+  //   }
+  // }
 
   handleMouseUp() {
     this.isDrawing = false;
@@ -90,15 +119,16 @@ export default class Eraser {
       this.transactionLog.pushClient(
         eraserTransaction(
           this.operationId,
+          this.mode,
           this.currentColor,
           this.colorpicker.primarycolor,
           this.brushsize.size,
+          ...this.points,
           // Provide the same point 4 times so spline doesn't go wild
-          this.points[0],
-          this.points[0],
-          this.points[0],
-          this.points[0],
-          this.mode
+          // this.points[0],
+          // this.points[0],
+          // this.points[0],
+          // this.points[0],
         )
       );
     }
@@ -107,12 +137,30 @@ export default class Eraser {
   }
   
 
-  handleMouseDown(input) {
+  // handleMouseDown(input) {
+  //   this.isDrawing = true;
+  //   const startPoint = this.virtualCanvas.positionInCanvas(input.x, input.y);
+  //   this.points.push(startPoint);
+  //   this.operationId = operationId();
+  //   this.toolbar.undo.pushOperation(this.operationId);
+  // }
+
+    handleMouseDown(input) {
     this.isDrawing = true;
     const startPoint = this.virtualCanvas.positionInCanvas(input.x, input.y);
-    this.points.push(startPoint);
+    this.points.push(startPoint, startPoint, startPoint);
     this.operationId = operationId();
     this.toolbar.undo.pushOperation(this.operationId);
+    this.transactionLog.pushClient(
+      eraserTransaction(
+        this.operationId,
+        this.mode,
+        this.currentColor,
+        this.toolbar.colorpicker.primarycolor,
+        this.toolbar.brushsize.size,
+        ...this.points,
+      )
+    );
   }
 }
 
@@ -147,13 +195,13 @@ export default class Eraser {
 
   mouseDownLeft(input) {
     this.mode = 0;
-    this.currentColor = toolbar.colorpicker.secondarycolor;
+    this.currentColor = this.toolbar.colorpicker.secondarycolor;
     this.handleMouseDown(input);
   }
 
   mouseDownRight(input) {
     this.mode = 1;
-    this.currentColor = toolbar.colorpicker.secondarycolor;
+    this.currentColor = this.toolbar.colorpicker.secondarycolor;
     this.handleMouseDown(input);
   }
 
@@ -174,8 +222,8 @@ export default class Eraser {
     const transaction = eraserTransaction(
       this.operationId,
       this.currentColor,
-      toolbar.colorpicker.primarycolor,
-      toolbar.brushsize.size,
+      this.toolbar.colorpicker.primarycolor,
+      this.toolbar.brushsize.size,
       ...this.points,
       this.mode
     );
@@ -192,13 +240,13 @@ export default class Eraser {
     const startPoint = virtualCanvas.positionInCanvas(input.x, input.y);
     this.points.push(startPoint, startPoint, startPoint);
     this.operationId = operationId();
-    toolbar.undo.pushOperation(this.operationId);
+    this.toolbar.undo.pushOperation(this.operationId);
     transactionLog.pushClient(
       eraserTransaction(
         this.operationId,
         this.currentColor,
-        toolbar.colorpicker.primarycolor,
-        toolbar.brushsize.size,
+        this.toolbar.colorpicker.primarycolor,
+        this.toolbar.brushsize.size,
         ...this.points,
         this.mode
       )
