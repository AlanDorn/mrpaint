diff a/client/toolbar.js b/client/toolbar.js	(rejected hunks)
@@ -35,12 +35,14 @@ import Ruler from "./ruler.js";
 // obj.listeners.splice(obj.listeners.indexOf(listener), 1) remove listener
 
 export default class Toolbar {
-  constructor(transactionLog, virtualCanvas, previewManager) {
-    this.virtualCanvas = virtualCanvas;
+  constructor({transactionLog, virtualCanvas, previewManager}) {
+    this.transactionLog = transactionLog; 
+    this.virtualCanvas = virtualCanvas; 
     this.previewManager = previewManager;
 
     this.colorpicker = new ColorPicker();
     this.brushsize = new BrushSize();
+    
     this.pencil = new Pencil(transactionLog, virtualCanvas, this);
     this.eraser = new Eraser(transactionLog, virtualCanvas, this);
     this.fillTool = new FillTool(transactionLog, virtualCanvas, this);
@@ -57,10 +59,21 @@ export default class Toolbar {
     this.activeSelector = null;
     this.setupToolSwitcher();
 
+    this.activeWheel = this.viewport;
     this.activeTool = this.pencil;
     this.updateActiveButton(this.pencilButton);
     this.cursor.setCanvasCursor(this.pencilButton, {x:3, y:20}); //3,20 idfk
 
+    this.drawingarea = document.getElementById("drawingarea");
+    drawingarea.addEventListener("click", () => {
+      this.activeSelector = null;
+      this.activeWheel = this.viewport;
+    });
+
+    //OLD
+    // this.drawingarea.addEventListener("click", () => {
+    //   this.activeSelector = null;
+    // });
   }
 
   setupToolSwitcher() {
@@ -70,7 +83,7 @@ export default class Toolbar {
     this.undoButton = document.getElementById("undo");
     this.redoButton = document.getElementById("redo");
     this.brushSizeSelector = document.getElementById("brushsize");
-    this.drawingarea = document.getElementById("drawingarea");
+    // this.drawingarea = document.getElementById("drawingarea");
     this.straightLineButton = document.getElementById("straightLine");
 
     this.undoButton.addEventListener("click", () => {
@@ -99,7 +112,7 @@ export default class Toolbar {
       this.cursor.setCanvasCursor(this.straightLineButton, {x:0, y:0});
     });
 
-    fillToolButton.addEventListener("click", () => {
+    this.fillToolButton.addEventListener("click", () => {
       this.activeTool = this.fillTool;
       this.updateActiveButton(this.fillToolButton);
       this.cursor.setCanvasCursor(this.fillToolButton, {x:2, y:21});
@@ -119,10 +132,6 @@ export default class Toolbar {
       if (this.activeReason === "mouseenter") this.activeSelector = null;
     });
 
-    this.drawingarea.addEventListener("click", () => {
-      this.activeSelector = null;
-    });
-
     this.viewport.widthAdjuster.addEventListener("mousedown", (event) => {
       if (this.activeTool == this.viewport) return;
       this.viewport.activeAdjuster = this.viewport.widthAdjuster;
@@ -157,7 +166,7 @@ export default class Toolbar {
   }
 
 
-  /*
+  
 updateActiveButton(activeButton) {
     const buttons = document.querySelectorAll("#toolbar button");
     const svgs = document.querySelectorAll("#toolbar button svg");
@@ -170,15 +179,15 @@ updateActiveButton(activeButton) {
 
     activeSvg.classList.add("active");
   }
-  */
-
-  updateActiveButton(activeButton) {
-    document
-      .querySelectorAll("#toolbar button, #toolbar button svg")
-      .forEach((button) => button.classList.remove("active"));
-    activeButton.classList.add("active");
-    activeButton.querySelector("svg").classList.add("active");
-  }
+  
+
+  // updateActiveButton(activeButton) {
+  //   document
+  //     .querySelectorAll("#toolbar button, #toolbar button svg")
+  //     .forEach((button) => button.classList.remove("active"));
+  //   activeButton.classList.add("active");
+  //   activeButton.querySelector("svg").classList.add("active");
+  // }
 
   mouseMove = (input) => {
     this.activeTool.mouseMove(input);
