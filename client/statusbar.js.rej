diff a/client/statusbar.js b/client/statusbar.js	(rejected hunks)
@@ -1,7 +1,8 @@
-import { virtualCanvas } from "./client.js";
+// import { virtualCanvas } from "./client.js";
 
 export default class StatusBar {
-  constructor() {
+  constructor(virtualCanvas) {
+    this.virtualCanvas = virtualCanvas;
     this.mouseposition = document.getElementById("mouseposition");
     this.canvassize = document.getElementById("canvassize");
     this.zoompower = document.getElementById("zoompower");
@@ -14,19 +15,19 @@ export default class StatusBar {
   }
 
   setMousePosition(input) {
-    const positionInCanvas = virtualCanvas.positionInCanvas(input.x, input.y);
+    const positionInCanvas = this.virtualCanvas.positionInCanvas(input.x, input.y);
     this.mouseposition.innerText = `${positionInCanvas[0]} x ${positionInCanvas[1]}`;
   }
 
   setCanvasSize() {
-    this.canvassize.innerText = `${virtualCanvas.width} x ${virtualCanvas.height}`;
+    this.canvassize.innerText = `${this.virtualCanvas.width} x ${this.virtualCanvas.height}`;
   }
 
   setZoomPower() {
-    if (virtualCanvas.zoomExp >= 0)
-      this.zoompower.innerText = `${Math.ceil(10 * virtualCanvas.zoom) / 10}x`;
+    if (this.virtualCanvas.zoomExp >= 0)
+      this.zoompower.innerText = `${Math.ceil(10 * this.virtualCanvas.zoom) / 10}x`;
     else
-      this.zoompower.innerText = `-${Math.ceil(10 / virtualCanvas.zoom) / 10}x`;
+      this.zoompower.innerText = `-${Math.ceil(10 / this.virtualCanvas.zoom) / 10}x`;
   }
 
   setCompletionBar(percent, left) {
